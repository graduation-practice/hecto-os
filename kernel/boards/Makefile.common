# Makefile 所在目录的绝对地址
MAKEFILE_DIR := $(dir $(abspath $(firstword $(MAKEFILE_LIST))))
# 当前文件 Makefile.common 所在目录的绝对路径
MAKEFILE_COMMON_DIR	:= $(dir $(abspath $(lastword $(MAKEFILE_LIST))))
# 项目的绝对路径
ROOT_DIR := $(abspath $(MAKEFILE_COMMON_DIR)../..)
# target 目录
TARGET_DIR := $(ROOT_DIR)/target/$(TARGET)

# Building
MODE		?=	debug
KERNEL_ELF	:=	$(TARGET_DIR)/$(MODE)/kernel
KERNEL_BIN	:=	$(KERNEL_ELF).bin
TEST_IMG	:=	$(ROOT_DIR)/res/testsuits.img

# BOARD
SBI			?=
BOOTLOADER	:=	$(ROOT_DIR)/res/$(SBI).bin

# Binutils
OBJDUMP		:=	rust-objdump --arch-name=riscv64
OBJCOPY		:=	rust-objcopy --binary-architecture=riscv64
READELF		:=	riscv64-elf-readelf

# Build Options
LOG 		?=	debug
BOARD		?=
ARCH		?=

RUSTFLAGS	:=	-C link-arg=-T$(MAKEFILE_DIR)linker.ld -C force-frame-pointers=yes
FEATURES	:=	"$(LOG) $(BOARD)"
BUILD_ARGS	:=	--features $(FEATURES) --target=$(TARGET) --no-default-features
ifeq ($(MODE), release)
	BUILD_ARGS += --release
endif

# QEMU
SMP 		?= 	2
QEMU		:=	qemu-system-riscv64
QEMU_OPTS	:=	-machine virt \
				-nographic \
				-smp $(SMP) \
				-bios $(BOOTLOADER) \
				-device loader,file=$(KERNEL_BIN),addr=$(KERNEL_ENTRY_PA) \
				-drive file=$(TEST_IMG),if=none,format=raw,id=x0 \
				-device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0

# GDB
GDB			:=	riscv64-elf-gdb
GDB_OPTS	:=	-ex 'file $(KERNEL_ELF)' \
				-ex 'set arch riscv:rv64' \
				-ex 'target remote localhost:1234'

define colorecho
    @tput setaf 6 2> /dev/null || true
    @echo $1
    @tput sgr0 2> /dev/null || true
endef

$(KERNEL_ELF):
	$(call colorecho, "Compiling kernel - $(BOARD)")
	RUSTFLAGS="$(RUSTFLAGS)" cargo build $(BUILD_ARGS) --offline

$(KERNEL_BIN): $(KERNEL_ELF)
	@$(OBJCOPY) $(KERNEL_ELF) --strip-all -O binary $@

build: $(KERNEL_BIN)

doc:
	RUSTFLAGS="$(RUSTFLAGS)" cargo doc --document-private-items $(BUILD_ARGS)

check:
	RUSTFLAGS="$(RUSTFLAGS)" cargo check $(BUILD_ARGS) --offline

clean:
	@cargo clean

disasm:
	@$(OBJDUMP) -d $(KERNEL_ELF) > $(TARGET_DIR)/kernel.asm
	@$(OBJDUMP) -t $(KERNEL_ELF) > $(TARGET_DIR)/symbol_table.asm

readelf:
	$(call colorecho, "Launching readelf")
	@$(READELF) --headers $(KERNEL_ELF)

.PHONY: $(KERNEL_ELF) $(KERNEL_BIN) build check clean disasm readelf
